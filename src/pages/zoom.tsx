import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { useAuthStore } from "../store/useAuthStore";
import { useUserStore } from "../store/useUserStore";
import { trpc } from "../utils/trpc";
import { useRouter } from "next/router";
import { useAuthData, useGetFromStore } from "../hooks/useZustandHooks";

const Home: NextPage = () => {
	const {} = process.env;
	const router = useRouter();
	const code = router.query.code as string;

	const {
		accessToken,
		refreshToken,
		user,
		setAccessToken,
		setRefreshToken,
		setUser,
	} = useAuthData();

	const { mutate: authorize } = trpc.zoom.accessToken.useMutation({
		onSuccess(data) {
			setAccessToken(data.access_token);
			setRefreshToken(data.refresh_token);
		},
	});
	const { mutate: refreshTokenMutation } = trpc.zoom.refreshToken.useMutation(
		{
			onSuccess(data) {
				setAccessToken(data.access_token);
				setRefreshToken(data.refresh_token);
			},
		}
	);
	const { mutate: getUser } = trpc.zoom.getMe.useMutation({
		onSuccess: (data) => {
			setUser({
				id: data.zoomUserData.id,
				email: data.zoomUserData.email,
				name:
					data.zoomUserData.first_name +
					" " +
					data.zoomUserData.last_name,
			});
		},
		onError: ({ message, data }) => {
			if (message === "EXPIRED_ACCESS_TOKEN") {
				refreshTokenMutation({ refreshToken: refreshToken as string });
			}
		},
	});
	const { mutate: getMeetings } = trpc.zoom.getMeetings.useMutation({
		onSuccess: (data) => {},
		onError: ({ message, data }) => {
			if (message === "EXPIRED_ACCESS_TOKEN") {
				refreshTokenMutation({ refreshToken: refreshToken as string });
			}
		},
	});

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
				<Link
					href={`https://zoom.us/oauth/authorize?response_type=code&client_id=cfql51F8QvWG0ZwM7o2XoQ&redirect_uri=http://localhost:3000
`}
				>
					<div className="rounded-full bg-blue-800 px-2 py-1 text-white">
						Redirect User
					</div>
				</Link>
				<button
					onClick={() => authorize({ code: code })}
					className="rounded-full bg-blue-800 px-2 py-1 text-white"
				>
					Send Access Token Request
				</button>
				<button
					onClick={() =>
						getUser({ accessToken: accessToken as string })
					}
					className="rounded-full bg-blue-800 px-2 py-1 text-white"
				>
					Get user request
				</button>
				<button
					onClick={() =>
						refreshTokenMutation({
							refreshToken: refreshToken as string,
						})
					}
					className="rounded-full bg-blue-800 px-2 py-1 text-white"
				>
					Refresh Token Mutation
				</button>
				<button
					onClick={() =>
						getMeetings({ accessToken: accessToken as string })
					}
					className="rounded-full bg-blue-800 px-2 py-1 text-white"
				>
					Get meetings
				</button>
				<pre className="w-full max-w-[100px] justify-center text-white">
					<AuthShowcase />
					<code className="">
						{JSON.stringify(
							{
								user,
								accessToken: accessToken?.slice(-5),
								refreshToken: refreshToken?.slice(-5),
							},
							null,
							2
						)}
					</code>
				</pre>
			</main>
		</>
	);
};

const AuthShowcase: React.FC = () => {
	const { data: sessionData } = useSession();

	const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
		undefined, // no input
		{ enabled: sessionData?.user !== undefined }
	);

	return (
		<div className="flex flex-col items-center justify-center gap-4">
			<p className="text-center text-2xl text-white">
				{sessionData && (
					<span>Logged in as {sessionData.user?.name}</span>
				)}
				{secretMessage && <span> - {secretMessage}</span>}
			</p>
			<button
				className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
				onClick={sessionData ? () => signOut() : () => signIn("google")}
			>
				{sessionData ? "Sign out" : "Sign in"}
			</button>
		</div>
	);
};

export default Home;
